## Start of rSeries Host tasks

- name: Configure DNS
  f5networks.f5os.f5os_dns:
    dns_servers: "{{ dns_servers }}"
    dns_domains: "{{ dns_domains }}"
  tags:
    - dns

- name: Configure NTP servers
  f5networks.f5os.f5os_ntp_server:
    server: "{{ item.server }}"
    state: "{{ item.state }}"
  loop: "{{ ntp_servers }}"
  tags:
    - ntp

- name: Create v2c SNMP Community
  f5networks.f5os.f5os_snmp:
    snmp_community: "{{ snmp_community }}"
  tags:
    - snmp

- name: Create SNMP Contact/Location/Name
  f5networks.f5os.f5os_snmp:
    snmp_mib: "{{ snmp_mib }}"
  tags:
    - snmp

- name: Configure Banner
  f5networks.f5os.f5os_system:
    hostname: "{{ system_config.hostname }}"
    motd: "{{ system_config.motd }}"
    login_banner: "{{ system_config.login_banner }}"
  tags:
    - banner

- name: Enable LLDP
  f5networks.f5os.f5os_lldp_config:
    enabled: "{{ lldp_config.enabled }}"
    system_name: "{{ lldp_config.system_name }}"
    system_description: "{{ lldp_config.system_description }}"
    tx_interval: "{{ lldp_config.tx_interval }}"
    tx_hold: "{{ lldp_config.tx_hold }}"
    reinitiate_delay: "{{ lldp_config.reinitiate_delay }}"
    tx_delay: "{{ lldp_config.tx_delay }}"
    max_neighbors_per_port: "{{ lldp_config.max_neighbors_per_port }}"
  tags:
    - lldp


- name: Create F5OS vlans
  f5networks.f5os.f5os_vlan:
    name: "{{ item.name }}"        # VLAN name (unique identifier)
    vlan_id: "{{ item.tag }}"      # VLAN ID (802.1Q tag)
  loop: "{{ vlans }}"              # Loop through each VLAN definition in 'vlans'
  tags:
    - vlan

- name: Create F5OS trunk (LAG)
  f5networks.f5os.f5os_lag:
    name: "{{ item.name }}"              # Trunk/LAG name
    lag_type: "{{ item.lag_type }}"     # Set trunking mode to LACP (Link Aggregation Control Protocol)
    mode: "{{ omit if item.lag_type == 'static' else item.lacp_mode }}"         # LACP mode: 'active' or 'passive'
    native_vlan: "{{ item.native_vlan | default(omit) }}" # VLAN assigned as native (untagged)
    trunk_vlans: "{{ item.trunked_vlans | default(omit) }}" # List of VLANs allowed on the trunk (tagged)
    interval: "{{ omit if item.lag_type == 'static' else item.lacp_timeout }}"  # LACP timeout: typically 'fast' or 'slow'
    config_members: "{{ item.members }}" # List of physical interfaces to include in the trunk
  loop: "{{ lags | default([], true) }}"                   # Loop through all defined lags
  tags:
    - lag

- name: Configure interfaces
  f5networks.f5os.f5os_interface:
    name: "{{ item.name }}"              # Interface name (e.g., ethernet1/1)
    description: "{{ item.description | default(omit) }}" # Optional description for the interface
    native_vlan: "{{ item.native_vlan | default(omit) }}" # VLAN applied as native (untagged)
    trunk_vlans: "{{ item.trunked_vlans | default(omit) }}" # Tagged VLANs assigned to this interface
  loop: "{{ interfaces | default([], true) }}"               # Loop through each interface definition
  tags:
    - interface

- name: Check for Tenant Image
  ansible.builtin.shell: sshpass -p "{{ root_password }}" ssh -o StrictHostKeyChecking=no "{{ root_username }}"@"{{ ansible_host }}" 'ls /var/F5/system/IMAGES/{{ item }}'
  vars:
    ansible_connection: local            # Run this command from the control node, not the remote device
  delegate_to: localhost                 # Force task execution on localhost
  register: check_tenant_images          # Store results of the image check for later use
  ignore_errors: true                    # Don’t fail if the file is not found (expected sometimes)
  loop: "{{ tenant_images }}"            # Check each image in the list of required tenant images
  failed_when: >
    ('No such file or directory' in check_tenant_images.stderr) or
    ('No such file or directory' in check_tenant_images.stdout)
  changed_when: 1 == 2                   # Mark as "not changed" (this task only checks, doesn't alter state)
  loop_control:
    index_var: index                     # Track loop index for cross-reference with results
  tags:
    - image

- name: Upload Tenant Image
  ansible.builtin.shell: sshpass -p {{ root_password }} scp {{ role_path }}/files/{{ item }} {{ root_username }}@{{ ansible_host }}:/var/F5/system/IMAGES/
  vars:
    ansible_connection: local            # Use the control node to send the file via SCP
  delegate_to: localhost                 # Force task execution on localhost
  loop: "{{ tenant_images }}"            # Loop over all tenant images to upload
  loop_control:
    index_var: index                     # Track index for lookup in previous result
  when: item not in check_tenant_images.results[index].stdout  # Only upload if image wasn’t already found
  tags:
    - image

- name: Collect list of all configured vlans to support ALL keyword
  ansible.builtin.set_fact:
    all_vlans: "{{ vlans | map(attribute='tag') | list }}"
  tags:
    - tenant

- name: Create Big-IP Tenants
  f5networks.f5os.f5os_tenant:
    name: "{{ item.name }}"              # Name of the tenant
    image_name: "{{ item.image_name }}"       # Image to use for the tenant
    mgmt_ip: "{{ item.management_ip }}"  # Management IP address for the tenant
    nodes:
      - 1
    mgmt_gateway: "{{ item.management_gateway }}" # Management gateway for the tenant
    mgmt_prefix: "{{ item.management_prefix }}" # Management subnet prefix length
    vlans: "{{ all_vlans if item.vlans == 'ALL' else item.vlans }}"
    cpu_cores: "{{ item.cpu_cores }}"          # Number of CPUs allocated to the tenant
    memory: "{{ item.memory }}"          # Memory allocated to the tenant in MB
    virtual_disk_size: "{{ item.virtual_disk_size }}" # Disk space allocated to the tenant in GB
    running_state: "{{ item.running_state }}"    # Desired state of the tenant
    state: "{{ item.ansible_state | default('present') }}" # Desired state of the tenant (default to 'present')
  loop: "{{ tenants }}"                  # Loop through each tenant in the tenants dictionary
  tags:
    - tenant


- name: Wait for Tenant to be API reachable
  f5networks.f5os.f5os_tenant_wait:
    name: "{{ item.name }}" # Specifies the name of the tenant to check.
    state: "api-ready" # Ensures the tenant is in the "api-ready" state.
    timeout: 10 # Sets the timeout (in seconds) for each API readiness check.
  register: wait_result # Registers the result of the wait operation in the `wait_result` variable.
  until: wait_result is not failed # Retries the check until the tenant is API reachable.
  retries: 60 # Retries the check up to 60 times.
  when:
    - item.running_state == "deployed" # Only runs if the tenant's `running_state` is "deployed".
    - item.ansible_state == "present" # Only runs if the tenant should exist
  loop: "{{ tenants }}" # Iterates over the `tenants` dictionary to perform the check for each tenant.
  tags:
    - tenant

## End of rSeries host tasks
